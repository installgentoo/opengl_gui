set(LIBS ${CMAKE_SOURCE_DIR}/../../.libs CACHE FILEPATH "Buid Libraries")
set(MODULES ${CMAKE_SOURCE_DIR}/../.cmake)
set(EXTRA_INCLUDES "")
set(EXTRA_SRC "")
set(EXTRA_LINK_LIBS "")
set(SANITIZER_LINK_OPTS "")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

macro(add_module MODULE_NAME)
 include(${MODULES}/${MODULE_NAME}.cmake)
endmacro()

macro(set_debug)
 set(CMAKE_BUILD_TYPE Debug)
 # add_compile_options(-D_GLIBCXX_DEBUG)
 add_compile_options(-fsanitize=address,undefined,leak)
 set(SANITIZER_LINK_OPTS "-fsanitize=address,leak,undefined")
 if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5.9)
  add_compile_options(-fsanitize-address-use-after-scope -shared-libasan)
 elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 6.9)
  add_compile_options(-gdwarf-4 -fsanitize-address-use-after-scope -lubasan)
 else()
  add_compile_options(-gdwarf-4 -lubasan)
 endif()
endmacro()

macro(set_release)
 set(CMAKE_BUILD_TYPE Release)
 add_compile_options(-O3)
endmacro()

macro(append LIST_NAME)
 LIST(APPEND ${LIST_NAME} ${ARGN})
endmacro()

function(copy_shaders)
 foreach(SHD_FILE ${ARGN})
  get_filename_component(SHADER_NAME ${SHD_FILE} NAME)
  configure_file(${SHD_FILE} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${SHADER_NAME} COPYONLY)
 endforeach()
endfunction()

function(build_library LIB_NAME)
 set(TARGET_SRC "")
 set(SHADERS "")
 foreach(LOOP_VAR ${ARGN})
  file(GLOB_RECURSE SRCS ${LOOP_VAR}/*.cpp)
  file(GLOB_RECURSE HEADERS ${LOOP_VAR}/*.h)
  file(GLOB_RECURSE SHD ${LOOP_VAR}/*.glsl)
  append(TARGET_SRC ${SRCS} ${HEADERS})
  append(SHADERS ${SHD})
 endforeach()
 set_source_files_properties(${TARGET_SRC} PROPERTIES COMPILE_FLAGS ${CUSTOM_WARNINGS})
 set_source_files_properties(${EXTRA_SRC} PROPERTIES COMPILE_FLAGS "-w")
 include_directories(SYSTEM ${EXTRA_INCLUDES})
 include_directories(${CMAKE_CURRENT_SOURCE_DIR})
 # shared breaks templated statics on win
 add_library(${LIB_NAME} STATIC ${TARGET_SRC} ${EXTRA_SRC} ${SHADERS})
 target_link_libraries(${LIB_NAME} ${EXTRA_LINK_LIBS} ${SANITIZER_LINK_OPTS})
 copy_shaders(${SHADERS})
endfunction()

function(build_exec MAIN_DIR)
 file(GLOB_RECURSE MAIN ${MAIN_DIR}/*.cxx)
 file(GLOB_RECURSE TARGET_SRC ${MAIN_DIR}/*.cpp)
 file(GLOB_RECURSE HEADERS ${MAIN_DIR}/*.h)
 file(GLOB_RECURSE SHADERS ${MAIN_DIR}/*.glsl)
 append(TARGET_SRC ${MAIN} ${HEADERS} ${SHADERS})
 set_source_files_properties(${TARGET_SRC} PROPERTIES COMPILE_FLAGS ${CUSTOM_WARNINGS})
 get_filename_component(MAIN_NAME ${MAIN} NAME_WE)
 include_directories(${MAIN_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
 add_executable(${MAIN_NAME} ${TARGET_SRC})
 target_link_libraries(${MAIN_NAME} ${ARGN})
 copy_shaders(${SHADERS})
endfunction()

function(copy_resources DIR_NAME)
 file(COPY ${DIR_NAME} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
endfunction()
